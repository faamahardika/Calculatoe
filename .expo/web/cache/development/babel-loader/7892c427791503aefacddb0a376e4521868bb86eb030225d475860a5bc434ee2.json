{"ast":null,"code":"export function getRandomMathQuestion() {\n  const typesOfQuestions = ['limit', 'derivative', 'arithmetic', 'integral', 'quadratic'];\n  const randomType = typesOfQuestions[Math.floor(Math.random() * typesOfQuestions.length)];\n  let equation, answer, type;\n  switch (randomType) {\n    case 'limit':\n      const a = Math.floor(Math.random() * 10) - 5;\n      const limitTypes = ['polynomial', 'fraction'];\n      const limitType = limitTypes[Math.floor(Math.random() * limitTypes.length)];\n      if (limitType === 'polynomial') {\n        const power = Math.floor(Math.random() * 3) + 1;\n        const b = Math.floor(Math.random() * 5) + 1;\n        const c = Math.floor(Math.random() * 5) - 2;\n        equation = `lim(x→${a}) (${b}x^${power} + ${c}x)`;\n        answer = (b * Math.pow(a, power) + c * a).toString();\n      } else {\n        let desiredAnswer = Math.floor(Math.random() * 19) - 9;\n        while (desiredAnswer === 0) {\n          desiredAnswer = Math.floor(Math.random() * 19) - 9;\n        }\n        const b = Math.floor(Math.random() * 5) + 1;\n        let d = Math.floor(Math.random() * 10) - 5;\n        while (d === 0 || d === a) {\n          d = Math.floor(Math.random() * 10) - 5;\n        }\n        const c = desiredAnswer * (a - d) - b * a;\n        equation = `lim(x→${a}) (${b}x + ${c})/(x - ${d})`;\n        answer = desiredAnswer.toString();\n      }\n      break;\n    case 'derivative':\n      const derCoef = Math.floor(Math.random() * 10) + 1;\n      const derExp = Math.floor(Math.random() * 4) + 2;\n      equation = `d/dx ${derCoef}x^${derExp}`;\n      const resultCoef = derCoef * derExp;\n      const resultExp = derExp - 1;\n      answer = resultExp === 1 ? `${resultCoef}x` : `${resultCoef}x^${resultExp}`;\n      break;\n    case 'arithmetic':\n      const firstTerm = Math.floor(Math.random() * 20) - 10;\n      const diff = Math.floor(Math.random() * 10) - 5;\n      const n = Math.floor(Math.random() * 10) + 1;\n      equation = `In arithmetic sequence with a=${firstTerm} and d=${diff}, find U${n}`;\n      answer = (firstTerm + (n - 1) * diff).toString();\n      break;\n    case 'integral':\n      const intCoef = Math.floor(Math.random() * 10) + 1;\n      const intExp = Math.floor(Math.random() * 4) + 1;\n      equation = intCoef === 1 ? `∫x^${intExp} dx` : `∫${intCoef}x^${intExp} dx`;\n      const newExp = intExp + 1;\n      const newCoef = intCoef / newExp;\n      answer = Number.isInteger(newCoef) ? newCoef === 1 ? `x^${newExp} + C` : `${newCoef}x^${newExp} + C` : `(${intCoef}/${newExp})x^${newExp} + C`;\n      break;\n    case 'quadratic':\n      let root1 = Math.floor(Math.random() * 10) - 5;\n      let root2 = Math.floor(Math.random() * 10) - 5;\n      while (root2 === root1) {\n        root2 = Math.floor(Math.random() * 10) - 5;\n      }\n      const p = Math.floor(Math.random() * 3) + 1;\n      const q = -p * (root1 + root2);\n      const r = p * root1 * root2;\n      const pTerm = p === 1 ? 'x²' : `${p}x²`;\n      const qTerm = q >= 0 ? `+ ${q}x` : `${q}x`;\n      const rTerm = r >= 0 ? `+ ${r}` : `${r}`;\n      equation = `${pTerm} ${qTerm} ${rTerm} = 0`;\n      answer = [root1.toString(), root2.toString()];\n      break;\n  }\n  return {\n    equation,\n    answer,\n    type: randomType\n  };\n}","map":{"version":3,"names":["getRandomMathQuestion","typesOfQuestions","randomType","Math","floor","random","length","equation","answer","type","a","limitTypes","limitType","power","b","c","pow","toString","desiredAnswer","d","derCoef","derExp","resultCoef","resultExp","firstTerm","diff","n","intCoef","intExp","newExp","newCoef","Number","isInteger","root1","root2","p","q","r","pTerm","qTerm","rTerm"],"sources":["/Users/aqilaataa/Documents/CalculatoeMobile/utils/mathQuestions.js"],"sourcesContent":["export function getRandomMathQuestion() {\n    const typesOfQuestions = ['limit', 'derivative', 'arithmetic', 'integral', 'quadratic'];\n    const randomType = typesOfQuestions[Math.floor(Math.random() * typesOfQuestions.length)];\n  \n    let equation, answer, type;\n  \n    switch (randomType) {\n      case 'limit':\n        const a = Math.floor(Math.random() * 10) - 5;\n        const limitTypes = ['polynomial', 'fraction'];\n        const limitType = limitTypes[Math.floor(Math.random() * limitTypes.length)];\n  \n        if (limitType === 'polynomial') {\n          const power = Math.floor(Math.random() * 3) + 1;\n          const b = Math.floor(Math.random() * 5) + 1;\n          const c = Math.floor(Math.random() * 5) - 2;\n          equation = `lim(x→${a}) (${b}x^${power} + ${c}x)`;\n          answer = (b * Math.pow(a, power) + c * a).toString();\n        } else {\n          let desiredAnswer = Math.floor(Math.random() * 19) - 9;\n          while (desiredAnswer === 0) {\n            desiredAnswer = Math.floor(Math.random() * 19) - 9;\n          }\n          const b = Math.floor(Math.random() * 5) + 1;\n          let d = Math.floor(Math.random() * 10) - 5;\n          while (d === 0 || d === a) {\n            d = Math.floor(Math.random() * 10) - 5;\n          }\n          const c = desiredAnswer * (a - d) - b * a;\n          equation = `lim(x→${a}) (${b}x + ${c})/(x - ${d})`;\n          answer = desiredAnswer.toString();\n        }\n        break;\n  \n      case 'derivative':\n        const derCoef = Math.floor(Math.random() * 10) + 1;\n        const derExp = Math.floor(Math.random() * 4) + 2;\n        equation = `d/dx ${derCoef}x^${derExp}`;\n        const resultCoef = derCoef * derExp;\n        const resultExp = derExp - 1;\n        answer = resultExp === 1 ? `${resultCoef}x` : `${resultCoef}x^${resultExp}`;\n        break;\n  \n      case 'arithmetic':\n        const firstTerm = Math.floor(Math.random() * 20) - 10;\n        const diff = Math.floor(Math.random() * 10) - 5;\n        const n = Math.floor(Math.random() * 10) + 1;\n        equation = `In arithmetic sequence with a=${firstTerm} and d=${diff}, find U${n}`;\n        answer = (firstTerm + (n-1) * diff).toString();\n        break;\n  \n      case 'integral':\n        const intCoef = Math.floor(Math.random() * 10) + 1;\n        const intExp = Math.floor(Math.random() * 4) + 1;\n        equation = intCoef === 1 ? `∫x^${intExp} dx` : `∫${intCoef}x^${intExp} dx`;\n        const newExp = intExp + 1;\n        const newCoef = intCoef / newExp;\n        answer = Number.isInteger(newCoef) \n          ? (newCoef === 1 ? `x^${newExp} + C` : `${newCoef}x^${newExp} + C`)\n          : `(${intCoef}/${newExp})x^${newExp} + C`;\n        break;\n  \n      case 'quadratic':\n        let root1 = Math.floor(Math.random() * 10) - 5;\n        let root2 = Math.floor(Math.random() * 10) - 5;\n        while (root2 === root1) {\n          root2 = Math.floor(Math.random() * 10) - 5;\n        }\n        const p = Math.floor(Math.random() * 3) + 1;\n        const q = -p * (root1 + root2);\n        const r = p * root1 * root2;\n        const pTerm = p === 1 ? 'x²' : `${p}x²`;\n        const qTerm = q >= 0 ? `+ ${q}x` : `${q}x`;\n        const rTerm = r >= 0 ? `+ ${r}` : `${r}`;\n        equation = `${pTerm} ${qTerm} ${rTerm} = 0`;\n        answer = [root1.toString(), root2.toString()];\n        break;\n    }\n  \n    return { equation, answer, type: randomType };\n  }\n  \n  "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}