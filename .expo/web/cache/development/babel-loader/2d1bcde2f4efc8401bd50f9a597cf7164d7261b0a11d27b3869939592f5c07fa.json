{"ast":null,"code":"var _jsxFileName = \"/Users/aqilaataa/Documents/CalculatoeMobile/screens/GameScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Audio } from 'expo-av';\nimport { getRandomMathQuestion } from '../utils/mathQuestions';\nimport { useAuth } from '../contexts/AuthContext';\nimport { doc, updateDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebaseConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nexport default function GameScreen({\n  route,\n  navigation\n}) {\n  const {\n    mode\n  } = route.params;\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [mathBoard, setMathBoard] = useState(Array(9).fill(null).map(() => getRandomMathQuestion()));\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [isGameActive, setIsGameActive] = useState(true);\n  const [botDifficulty, setBotDifficulty] = useState('medium');\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [sounds, setSounds] = useState({});\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    initializeGame();\n    loadSounds();\n    return () => {\n      unloadSounds();\n    };\n  }, []);\n  useEffect(() => {\n    if (mode === 'bot' && currentPlayer === 'O' && isGameActive) {\n      setTimeout(botMove, 1000);\n    }\n  }, [currentPlayer, mode, isGameActive]);\n  const loadSounds = async () => {\n    const soundFiles = {\n      playerWin: require('../assets/sounds/player_win.wav'),\n      botWin: require('../assets/sounds/bot_win.wav'),\n      tie: require('../assets/sounds/tie.wav'),\n      mark: require('../assets/sounds/mark.wav')\n    };\n    const loadedSounds = {};\n    for (const [key, value] of Object.entries(soundFiles)) {\n      const {\n        sound\n      } = await Audio.Sound.createAsync(value);\n      loadedSounds[key] = sound;\n    }\n    setSounds(loadedSounds);\n  };\n  const unloadSounds = async () => {\n    for (const sound of Object.values(sounds)) {\n      await sound.unloadAsync();\n    }\n  };\n  const playSound = async soundName => {\n    if (sounds[soundName]) {\n      await sounds[soundName].replayAsync();\n    }\n  };\n  const initializeGame = () => {\n    setBoard(Array(9).fill(null));\n    setMathBoard(Array(9).fill(null).map(() => getRandomMathQuestion()));\n    setCurrentPlayer('X');\n    setIsGameActive(true);\n  };\n  const handleCellPress = index => {\n    if (board[index] || !isGameActive || mode === 'bot' && currentPlayer === 'O') return;\n    setCurrentQuestion(mathBoard[index]);\n    setModalVisible(true);\n  };\n  const handleAnswer = () => {\n    setModalVisible(false);\n    const index = board.findIndex((cell, i) => cell === null && mathBoard[i] === currentQuestion);\n    if (currentQuestion.type === 'quadratic') {\n      if (userAnswer === currentQuestion.answer[0] || userAnswer === currentQuestion.answer[1]) {\n        makeMove(index);\n      } else {\n        Alert.alert('Wrong answer!', 'Next player\\'s turn.');\n        switchPlayer();\n      }\n    } else {\n      if (userAnswer === currentQuestion.answer) {\n        makeMove(index);\n      } else {\n        Alert.alert('Wrong answer!', 'Next player\\'s turn.');\n        switchPlayer();\n      }\n    }\n    setUserAnswer('');\n  };\n  const makeMove = index => {\n    playSound('mark');\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n    if (checkWinner(newBoard, currentPlayer)) {\n      const winMessage = mode === 'bot' ? currentPlayer === 'X' ? 'You win!' : 'Bot wins!' : `Player ${currentPlayer} wins!`;\n      endGame(winMessage);\n    } else if (isBoardFull(newBoard)) {\n      endGame(\"It's a tie!\");\n    } else {\n      switchPlayer();\n    }\n  };\n  const switchPlayer = () => {\n    setCurrentPlayer(prev => prev === 'X' ? 'O' : 'X');\n  };\n  const botMove = () => {\n    let cellIndex;\n    switch (botDifficulty) {\n      case 'easy':\n        cellIndex = easyBotMove();\n        break;\n      case 'medium':\n        cellIndex = mediumBotMove();\n        break;\n      case 'hard':\n        cellIndex = hardBotMove();\n        break;\n      default:\n        cellIndex = mediumBotMove();\n    }\n    if (cellIndex !== undefined && board[cellIndex] === null) {\n      makeMove(cellIndex);\n    }\n  };\n  const easyBotMove = () => {\n    const availableCells = board.map((cell, index) => cell === null ? index : null).filter(cell => cell !== null);\n    return availableCells[Math.floor(Math.random() * availableCells.length)];\n  };\n  const mediumBotMove = () => {\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'O';\n        if (checkWinner(testBoard, 'O')) {\n          return i;\n        }\n      }\n    }\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'X';\n        if (checkWinner(testBoard, 'X')) {\n          return i;\n        }\n      }\n    }\n    return easyBotMove();\n  };\n  const hardBotMove = () => {\n    let bestScore = -Infinity;\n    let move = -1;\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'O';\n        let score = minimax(testBoard, 0, false);\n        if (score > bestScore) {\n          bestScore = score;\n          move = i;\n        }\n      }\n    }\n    return move;\n  };\n  const minimax = (board, depth, isMaximizing) => {\n    const result = checkGameEnd(board);\n    if (result !== null) {\n      return result;\n    }\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = 'O';\n          let score = minimax(board, depth + 1, false);\n          board[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = 'X';\n          let score = minimax(board, depth + 1, true);\n          board[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  };\n  const checkGameEnd = board => {\n    if (checkWinner(board, 'O')) return 10;\n    if (checkWinner(board, 'X')) return -10;\n    if (isBoardFull(board)) return 0;\n    return null;\n  };\n  const checkWinner = (board, player) => {\n    return winningCombinations.some(combination => combination.every(index => board[index] === player));\n  };\n  const isBoardFull = board => {\n    return board.every(cell => cell !== null);\n  };\n  const updateUserStats = async difficulty => {\n    if (user) {\n      const statsRef = doc(db, 'playerStats', user.uid);\n      const statsDoc = await getDoc(statsRef);\n      if (statsDoc.exists()) {\n        const currentStats = statsDoc.data();\n        const updatedStats = Object.assign({}, currentStats, {\n          [difficulty]: (currentStats[difficulty] || 0) + 1,\n          total: (currentStats.total || 0) + 1\n        });\n        await updateDoc(statsRef, updatedStats);\n      }\n    }\n  };\n  const endGame = async message => {\n    setIsGameActive(false);\n    if (message.includes('win')) {\n      if (message.includes('Bot')) {\n        playSound('botWin');\n      } else {\n        playSound('playerWin');\n        if (mode === 'bot') {\n          await updateUserStats(botDifficulty);\n        }\n      }\n    } else {\n      playSound('tie');\n    }\n    Alert.alert('Game Over', message, [{\n      text: 'Play Again',\n      onPress: initializeGame\n    }, {\n      text: 'Home',\n      onPress: () => navigation.navigate('Home')\n    }]);\n  };\n  const renderCell = index => {\n    return _jsxDEV(TouchableOpacity, {\n      style: styles.cell,\n      onPress: () => handleCellPress(index),\n      disabled: !isGameActive || board[index] !== null,\n      children: _jsxDEV(Text, {\n        style: [styles.cellText, board[index] === 'O' && styles.botText],\n        children: board[index] || mathBoard[index] && mathBoard[index].equation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this);\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Calculatoe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), _jsxDEV(Text, {\n      style: styles.playerTurn,\n      children: mode === 'bot' && currentPlayer === 'O' ? \"Bot's turn\" : `Player ${currentPlayer}'s turn`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.board,\n      children: board.map((_, index) => renderCell(index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: styles.resetButton,\n      onPress: initializeGame,\n      children: _jsxDEV(Text, {\n        style: styles.resetButtonText,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), mode === 'bot' && _jsxDEV(View, {\n      style: styles.difficultyContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.difficultyText,\n        children: \"Bot Difficulty:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), _jsxDEV(TouchableOpacity, {\n        style: [styles.difficultyButton, botDifficulty === 'easy' && styles.activeDifficulty],\n        onPress: () => setBotDifficulty('easy'),\n        children: _jsxDEV(Text, {\n          style: styles.difficultyButtonText,\n          children: \"Easy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), _jsxDEV(TouchableOpacity, {\n        style: [styles.difficultyButton, botDifficulty === 'medium' && styles.activeDifficulty],\n        onPress: () => setBotDifficulty('medium'),\n        children: _jsxDEV(Text, {\n          style: styles.difficultyButtonText,\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), _jsxDEV(TouchableOpacity, {\n        style: [styles.difficultyButton, botDifficulty === 'hard' && styles.activeDifficulty],\n        onPress: () => setBotDifficulty('hard'),\n        children: _jsxDEV(Text, {\n          style: styles.difficultyButtonText,\n          children: \"Hard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this), _jsxDEV(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: () => setModalVisible(false),\n      children: _jsxDEV(View, {\n        style: styles.modalView,\n        children: [_jsxDEV(Text, {\n          style: styles.modalText,\n          children: currentQuestion?.equation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), _jsxDEV(TextInput, {\n          style: styles.input,\n          onChangeText: setUserAnswer,\n          value: userAnswer,\n          placeholder: \"Enter your answer\",\n          keyboardType: \"default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), _jsxDEV(TouchableOpacity, {\n          style: styles.submitButton,\n          onPress: handleAnswer,\n          children: _jsxDEV(Text, {\n            style: styles.submitButtonText,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#12181B',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 20,\n    fontFamily: 'Itim-Regular'\n  },\n  playerTurn: {\n    fontSize: 24,\n    color: 'white',\n    marginBottom: 20,\n    fontFamily: 'Itim-Regular'\n  },\n  board: {\n    width: 300,\n    height: 300,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  cell: {\n    width: 100,\n    height: 100,\n    borderWidth: 1,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  cellText: {\n    color: '#09C372',\n    fontSize: 16,\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular'\n  },\n  botText: {\n    color: '#FF3860',\n    fontFamily: 'Itim-Regular'\n  },\n  resetButton: {\n    marginTop: 20,\n    backgroundColor: '#FF3860',\n    padding: 10,\n    borderRadius: 5\n  },\n  resetButtonText: {\n    color: 'white',\n    fontSize: 18,\n    fontFamily: 'Itim-Regular'\n  },\n  difficultyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 20\n  },\n  difficultyText: {\n    color: 'white',\n    marginRight: 10,\n    fontFamily: 'Itim-Regular'\n  },\n  difficultyButton: {\n    backgroundColor: '#333',\n    padding: 10,\n    borderRadius: 5,\n    marginHorizontal: 5\n  },\n  activeDifficulty: {\n    backgroundColor: '#FF3860'\n  },\n  difficultyButtonText: {\n    color: 'white',\n    fontFamily: 'Itim-Regular'\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular'\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    width: 200,\n    fontFamily: 'Itim-Regular'\n  },\n  submitButton: {\n    backgroundColor: '#2196F3',\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  submitButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","TouchableOpacity","Alert","Modal","TextInput","Audio","getRandomMathQuestion","useAuth","doc","updateDoc","getDoc","db","jsxDEV","_jsxDEV","winningCombinations","GameScreen","route","navigation","mode","params","board","setBoard","Array","fill","mathBoard","setMathBoard","map","currentPlayer","setCurrentPlayer","isGameActive","setIsGameActive","botDifficulty","setBotDifficulty","modalVisible","setModalVisible","currentQuestion","setCurrentQuestion","userAnswer","setUserAnswer","sounds","setSounds","user","initializeGame","loadSounds","unloadSounds","setTimeout","botMove","soundFiles","playerWin","require","botWin","tie","mark","loadedSounds","key","value","Object","entries","sound","Sound","createAsync","values","unloadAsync","playSound","soundName","replayAsync","handleCellPress","index","handleAnswer","findIndex","cell","i","type","answer","makeMove","alert","switchPlayer","newBoard","checkWinner","winMessage","endGame","isBoardFull","prev","cellIndex","easyBotMove","mediumBotMove","hardBotMove","undefined","availableCells","filter","Math","floor","random","length","testBoard","bestScore","Infinity","move","score","minimax","depth","isMaximizing","result","checkGameEnd","max","min","player","some","combination","every","updateUserStats","difficulty","statsRef","uid","statsDoc","exists","currentStats","data","updatedStats","assign","total","message","includes","text","onPress","navigate","renderCell","style","styles","disabled","children","cellText","botText","equation","fileName","_jsxFileName","lineNumber","columnNumber","container","title","playerTurn","_","resetButton","resetButtonText","difficultyContainer","difficultyText","difficultyButton","activeDifficulty","difficultyButtonText","animationType","transparent","visible","onRequestClose","modalView","modalText","input","onChangeText","placeholder","keyboardType","submitButton","submitButtonText","create","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","color","marginBottom","fontFamily","width","height","flexDirection","flexWrap","borderWidth","borderColor","textAlign","marginTop","padding","borderRadius","marginRight","marginHorizontal","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"sources":["/Users/aqilaataa/Documents/CalculatoeMobile/screens/GameScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, Alert, Modal, TextInput } from 'react-native';\nimport { Audio } from 'expo-av';\nimport { getRandomMathQuestion } from '../utils/mathQuestions';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { RootStackParamList } from '../App';\nimport { useAuth } from '../contexts/AuthContext';\nimport { doc, updateDoc, increment, getDoc } from 'firebase/firestore';\nimport { db } from '../firebaseConfig';\n\ntype Props = {\n  navigation: StackNavigationProp<RootStackParamList, 'Game'>;\n  route: RouteProp<RootStackParamList, 'Game'>;\n};\n\nconst winningCombinations = [\n  [0, 1, 2], [3, 4, 5], [6, 7, 8],\n  [0, 3, 6], [1, 4, 7], [2, 5, 8],\n  [0, 4, 8], [2, 4, 6]\n];\n\nexport default function GameScreen({ route, navigation }: Props) {\n  const { mode } = route.params;\n  const [board, setBoard] = useState<(string | null)[]>(Array(9).fill(null));\n  const [mathBoard, setMathBoard] = useState<any[]>(Array(9).fill(null).map(() => getRandomMathQuestion()));\n  const [currentPlayer, setCurrentPlayer] = useState<'X' | 'O'>('X');\n  const [isGameActive, setIsGameActive] = useState(true);\n  const [botDifficulty, setBotDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState<any>(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [sounds, setSounds] = useState<{[key: string]: Audio.Sound}>({});\n  const { user } = useAuth();\n\n  useEffect(() => {\n    initializeGame();\n    loadSounds();\n    return () => {\n      unloadSounds();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (mode === 'bot' && currentPlayer === 'O' && isGameActive) {\n      setTimeout(botMove, 1000);\n    }\n  }, [currentPlayer, mode, isGameActive]);\n\n  const loadSounds = async () => {\n    const soundFiles = {\n      playerWin: require('../assets/sounds/player_win.wav'),\n      botWin: require('../assets/sounds/bot_win.wav'),\n      tie: require('../assets/sounds/tie.wav'),\n      mark: require('../assets/sounds/mark.wav'),\n    };\n\n    const loadedSounds: {[key: string]: Audio.Sound} = {};\n    for (const [key, value] of Object.entries(soundFiles)) {\n      const { sound } = await Audio.Sound.createAsync(value);\n      loadedSounds[key] = sound;\n    }\n    setSounds(loadedSounds);\n  };\n\n  const unloadSounds = async () => {\n    for (const sound of Object.values(sounds)) {\n      await sound.unloadAsync();\n    }\n  };\n\n  const playSound = async (soundName: string) => {\n    if (sounds[soundName]) {\n      await sounds[soundName].replayAsync();\n    }\n  };\n\n  const initializeGame = () => {\n    setBoard(Array(9).fill(null));\n    setMathBoard(Array(9).fill(null).map(() => getRandomMathQuestion()));\n    setCurrentPlayer('X');\n    setIsGameActive(true);\n  };\n\n  const handleCellPress = (index: number) => {\n    if (board[index] || !isGameActive || (mode === 'bot' && currentPlayer === 'O')) return;\n\n    setCurrentQuestion(mathBoard[index]);\n    setModalVisible(true);\n  };\n\n  const handleAnswer = () => {\n    setModalVisible(false);\n    const index = board.findIndex((cell, i) => cell === null && mathBoard[i] === currentQuestion);\n    \n    if (currentQuestion.type === 'quadratic') {\n      if (userAnswer === currentQuestion.answer[0] || userAnswer === currentQuestion.answer[1]) {\n        makeMove(index);\n      } else {\n        Alert.alert('Wrong answer!', 'Next player\\'s turn.');\n        switchPlayer();\n      }\n    } else {\n      if (userAnswer === currentQuestion.answer) {\n        makeMove(index);\n      } else {\n        Alert.alert('Wrong answer!', 'Next player\\'s turn.');\n        switchPlayer();\n      }\n    }\n    setUserAnswer('');\n  };\n\n  const makeMove = (index: number) => {\n    playSound('mark');\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n\n    if (checkWinner(newBoard, currentPlayer)) {\n      const winMessage = mode === 'bot' \n        ? (currentPlayer === 'X' ? 'You win!' : 'Bot wins!') \n        : `Player ${currentPlayer} wins!`;\n      endGame(winMessage);\n    } else if (isBoardFull(newBoard)) {\n      endGame(\"It's a tie!\");\n    } else {\n      switchPlayer();\n    }\n  };\n\n  const switchPlayer = () => {\n    setCurrentPlayer(prev => prev === 'X' ? 'O' : 'X');\n  };\n\n  const botMove = () => {\n    let cellIndex: number | undefined;\n    switch (botDifficulty) {\n      case 'easy':\n        cellIndex = easyBotMove();\n        break;\n      case 'medium':\n        cellIndex = mediumBotMove();\n        break;\n      case 'hard':\n        cellIndex = hardBotMove();\n        break;\n      default:\n        cellIndex = mediumBotMove();\n    }\n\n    if (cellIndex !== undefined && board[cellIndex] === null) {\n      makeMove(cellIndex);\n    }\n  };\n\n  const easyBotMove = (): number => {\n    const availableCells = board\n      .map((cell, index) => cell === null ? index : null)\n      .filter((cell): cell is number => cell !== null);\n    return availableCells[Math.floor(Math.random() * availableCells.length)];\n  };\n\n  const mediumBotMove = (): number => {\n    // Check if bot can win in the next move\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'O';\n        if (checkWinner(testBoard, 'O')) {\n          return i;\n        }\n      }\n    }\n\n    // Check if player can win in the next move and block\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'X';\n        if (checkWinner(testBoard, 'X')) {\n          return i;\n        }\n      }\n    }\n\n    // If no winning move, play randomly\n    return easyBotMove();\n  };\n\n  const hardBotMove = (): number => {\n    let bestScore = -Infinity;\n    let move: number = -1;\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        const testBoard = [...board];\n        testBoard[i] = 'O';\n        let score = minimax(testBoard, 0, false);\n        if (score > bestScore) {\n          bestScore = score;\n          move = i;\n        }\n      }\n    }\n    return move;\n  };\n\n  const minimax = (board: (string | null)[], depth: number, isMaximizing: boolean): number => {\n    const result = checkGameEnd(board);\n    if (result !== null) {\n      return result;\n    }\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = 'O';\n          let score = minimax(board, depth + 1, false);\n          board[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = 'X';\n          let score = minimax(board, depth + 1, true);\n          board[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  const checkGameEnd = (board: (string | null)[]): number | null => {\n    if (checkWinner(board, 'O')) return 10;\n    if (checkWinner(board, 'X')) return -10;\n    if (isBoardFull(board)) return 0;\n    return null;\n  };\n\n  const checkWinner = (board: (string | null)[], player: string): boolean => {\n    return winningCombinations.some(combination =>\n      combination.every(index => board[index] === player)\n    );\n  };\n\n  const isBoardFull = (board: (string | null)[]): boolean => {\n    return board.every(cell => cell !== null);\n  };\n\n  const updateUserStats = async (difficulty: string) => {\n    if (user) {\n      const statsRef = doc(db, 'playerStats', user.uid);\n      const statsDoc = await getDoc(statsRef);\n    \n      if (statsDoc.exists()) {\n        const currentStats = statsDoc.data();\n        const updatedStats = {\n          ...currentStats,\n          [difficulty]: (currentStats[difficulty] || 0) + 1,\n          total: (currentStats.total || 0) + 1\n        };\n\n        await updateDoc(statsRef, updatedStats);\n      }\n    }\n  };\n\n  const endGame = async (message: string) => {\n    setIsGameActive(false);\n    if (message.includes('win')) {\n      if (message.includes('Bot')) {\n        playSound('botWin');\n      } else {\n        playSound('playerWin');\n        if (mode === 'bot') {\n          await updateUserStats(botDifficulty);\n        }\n      }\n    } else {\n      playSound('tie');\n    }\n    Alert.alert('Game Over', message, [\n      { text: 'Play Again', onPress: initializeGame },\n      { text: 'Home', onPress: () => navigation.navigate('Home') },\n    ]);\n  };\n\n  const renderCell = (index: number) => {\n    return (\n      <TouchableOpacity\n        style={styles.cell}\n        onPress={() => handleCellPress(index)}\n        disabled={!isGameActive || board[index] !== null}\n      >\n        <Text style={[styles.cellText, board[index] === 'O' && styles.botText]}>\n          {board[index] || (mathBoard[index] && mathBoard[index].equation)}\n        </Text>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Calculatoe</Text>\n      <Text style={styles.playerTurn}>\n        {mode === 'bot' && currentPlayer === 'O' ? \"Bot's turn\" : `Player ${currentPlayer}'s turn`}\n      </Text>\n      <View style={styles.board}>\n        {board.map((_, index) => renderCell(index))}\n      </View>\n      <TouchableOpacity style={styles.resetButton} onPress={initializeGame}>\n        <Text style={styles.resetButtonText}>Reset Game</Text>\n      </TouchableOpacity>\n      {mode === 'bot' && (\n        <View style={styles.difficultyContainer}>\n          <Text style={styles.difficultyText}>Bot Difficulty:</Text>\n          <TouchableOpacity\n            style={[styles.difficultyButton, botDifficulty === 'easy' && styles.activeDifficulty]}\n            onPress={() => setBotDifficulty('easy')}\n          >\n            <Text style={styles.difficultyButtonText}>Easy</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.difficultyButton, botDifficulty === 'medium' && styles.activeDifficulty]}\n            onPress={() => setBotDifficulty('medium')}\n          >\n            <Text style={styles.difficultyButtonText}>Medium</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.difficultyButton, botDifficulty === 'hard' && styles.activeDifficulty]}\n            onPress={() => setBotDifficulty('hard')}\n          >\n            <Text style={styles.difficultyButtonText}>Hard</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={styles.modalView}>\n          <Text style={styles.modalText}>{currentQuestion?.equation}</Text>\n          <TextInput\n            style={styles.input}\n            onChangeText={setUserAnswer}\n            value={userAnswer}\n            placeholder=\"Enter your answer\"\n            keyboardType=\"default\"\n          />\n          <TouchableOpacity style={styles.submitButton} onPress={handleAnswer}>\n            <Text style={styles.submitButtonText}>Submit</Text>\n          </TouchableOpacity>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#12181B',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 20,\n    fontFamily: 'Itim-Regular',\n  },\n  playerTurn: {\n    fontSize: 24,\n    color: 'white',\n    marginBottom: 20,\n    fontFamily: 'Itim-Regular',\n  },\n  board: {\n    width: 300,\n    height: 300,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  cell: {\n    width: 100,\n    height: 100,\n    borderWidth: 1,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  cellText: {\n    color: '#09C372',\n    fontSize: 16,\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular',\n  },\n  botText: {\n    color: '#FF3860',\n    fontFamily: 'Itim-Regular',\n  },\n  resetButton: {\n    marginTop: 20,\n    backgroundColor: '#FF3860',\n    padding: 10,\n    borderRadius: 5,\n  },\n  resetButtonText: {\n    color: 'white',\n    fontSize: 18,\n    fontFamily: 'Itim-Regular',\n  },\n  difficultyContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  difficultyText: {\n    color: 'white',\n    marginRight: 10,\n    fontFamily: 'Itim-Regular',\n  },\n  difficultyButton: {\n    backgroundColor: '#333',\n    padding: 10,\n    borderRadius: 5,\n    marginHorizontal: 5,\n  },\n  activeDifficulty: {\n    backgroundColor: '#FF3860',\n  },\n  difficultyButtonText: {\n    color: 'white',\n    fontFamily: 'Itim-Regular',\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular',\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n    width: 200,\n    fontFamily: 'Itim-Regular',\n  },\n  submitButton: {\n    backgroundColor: '#2196F3',\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  submitButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontFamily: 'Itim-Regular',\n  },\n});\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,SAAA;AAEnD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,qBAAqB,QAAQ,wBAAwB;AAI9D,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,GAAG,EAAEC,SAAS,EAAaC,MAAM,QAAQ,oBAAoB;AACtE,SAASC,EAAE,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvC,MAAMC,mBAAmB,GAAG,CAC1B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACrB;AAED,eAAe,SAASC,UAAUA,CAAC;EAAEC,KAAK;EAAEC;AAAkB,CAAC,EAAE;EAC/D,MAAM;IAAEC;EAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAoB0B,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAQ0B,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACG,GAAG,CAAC,MAAMpB,qBAAqB,CAAC,CAAC,CAAC,CAAC;EACzG,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAY,GAAG,CAAC;EAClE,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAA6B,QAAQ,CAAC;EACxF,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACuC,eAAe,EAAEC,kBAAkB,CAAC,GAAGxC,QAAQ,CAAM,IAAI,CAAC;EACjE,MAAM,CAACyC,UAAU,EAAEC,aAAa,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC2C,MAAM,EAAEC,SAAS,CAAC,GAAG5C,QAAQ,CAA+B,CAAC,CAAC,CAAC;EACtE,MAAM;IAAE6C;EAAK,CAAC,GAAGlC,OAAO,CAAC,CAAC;EAE1BV,SAAS,CAAC,MAAM;IACd6C,cAAc,CAAC,CAAC;IAChBC,UAAU,CAAC,CAAC;IACZ,OAAO,MAAM;MACXC,YAAY,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN/C,SAAS,CAAC,MAAM;IACd,IAAIqB,IAAI,KAAK,KAAK,IAAIS,aAAa,KAAK,GAAG,IAAIE,YAAY,EAAE;MAC3DgB,UAAU,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF,CAAC,EAAE,CAACnB,aAAa,EAAET,IAAI,EAAEW,YAAY,CAAC,CAAC;EAEvC,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMI,UAAU,GAAG;MACjBC,SAAS,EAAEC,OAAO,CAAC,iCAAiC,CAAC;MACrDC,MAAM,EAAED,OAAO,CAAC,8BAA8B,CAAC;MAC/CE,GAAG,EAAEF,OAAO,CAAC,0BAA0B,CAAC;MACxCG,IAAI,EAAEH,OAAO,CAAC,2BAA2B;IAC3C,CAAC;IAED,MAAMI,YAA0C,GAAG,CAAC,CAAC;IACrD,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACV,UAAU,CAAC,EAAE;MACrD,MAAM;QAAEW;MAAM,CAAC,GAAG,MAAMrD,KAAK,CAACsD,KAAK,CAACC,WAAW,CAACL,KAAK,CAAC;MACtDF,YAAY,CAACC,GAAG,CAAC,GAAGI,KAAK;IAC3B;IACAlB,SAAS,CAACa,YAAY,CAAC;EACzB,CAAC;EAED,MAAMT,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,KAAK,MAAMc,KAAK,IAAIF,MAAM,CAACK,MAAM,CAACtB,MAAM,CAAC,EAAE;MACzC,MAAMmB,KAAK,CAACI,WAAW,CAAC,CAAC;IAC3B;EACF,CAAC;EAED,MAAMC,SAAS,GAAG,MAAOC,SAAiB,IAAK;IAC7C,IAAIzB,MAAM,CAACyB,SAAS,CAAC,EAAE;MACrB,MAAMzB,MAAM,CAACyB,SAAS,CAAC,CAACC,WAAW,CAAC,CAAC;IACvC;EACF,CAAC;EAED,MAAMvB,cAAc,GAAGA,CAAA,KAAM;IAC3BrB,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,YAAY,CAACH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACG,GAAG,CAAC,MAAMpB,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACpEsB,gBAAgB,CAAC,GAAG,CAAC;IACrBE,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMoC,eAAe,GAAIC,KAAa,IAAK;IACzC,IAAI/C,KAAK,CAAC+C,KAAK,CAAC,IAAI,CAACtC,YAAY,IAAKX,IAAI,KAAK,KAAK,IAAIS,aAAa,KAAK,GAAI,EAAE;IAEhFS,kBAAkB,CAACZ,SAAS,CAAC2C,KAAK,CAAC,CAAC;IACpCjC,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMkC,YAAY,GAAGA,CAAA,KAAM;IACzBlC,eAAe,CAAC,KAAK,CAAC;IACtB,MAAMiC,KAAK,GAAG/C,KAAK,CAACiD,SAAS,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAKD,IAAI,KAAK,IAAI,IAAI9C,SAAS,CAAC+C,CAAC,CAAC,KAAKpC,eAAe,CAAC;IAE7F,IAAIA,eAAe,CAACqC,IAAI,KAAK,WAAW,EAAE;MACxC,IAAInC,UAAU,KAAKF,eAAe,CAACsC,MAAM,CAAC,CAAC,CAAC,IAAIpC,UAAU,KAAKF,eAAe,CAACsC,MAAM,CAAC,CAAC,CAAC,EAAE;QACxFC,QAAQ,CAACP,KAAK,CAAC;MACjB,CAAC,MAAM;QACLjE,KAAK,CAACyE,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC;QACpDC,YAAY,CAAC,CAAC;MAChB;IACF,CAAC,MAAM;MACL,IAAIvC,UAAU,KAAKF,eAAe,CAACsC,MAAM,EAAE;QACzCC,QAAQ,CAACP,KAAK,CAAC;MACjB,CAAC,MAAM;QACLjE,KAAK,CAACyE,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC;QACpDC,YAAY,CAAC,CAAC;MAChB;IACF;IACAtC,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,MAAMoC,QAAQ,GAAIP,KAAa,IAAK;IAClCJ,SAAS,CAAC,MAAM,CAAC;IACjB,MAAMc,QAAQ,GAAG,CAAC,GAAGzD,KAAK,CAAC;IAC3ByD,QAAQ,CAACV,KAAK,CAAC,GAAGxC,aAAa;IAC/BN,QAAQ,CAACwD,QAAQ,CAAC;IAElB,IAAIC,WAAW,CAACD,QAAQ,EAAElD,aAAa,CAAC,EAAE;MACxC,MAAMoD,UAAU,GAAG7D,IAAI,KAAK,KAAK,GAC5BS,aAAa,KAAK,GAAG,GAAG,UAAU,GAAG,WAAW,GACjD,UAAUA,aAAa,QAAQ;MACnCqD,OAAO,CAACD,UAAU,CAAC;IACrB,CAAC,MAAM,IAAIE,WAAW,CAACJ,QAAQ,CAAC,EAAE;MAChCG,OAAO,CAAC,aAAa,CAAC;IACxB,CAAC,MAAM;MACLJ,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzBhD,gBAAgB,CAACsD,IAAI,IAAIA,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EACpD,CAAC;EAED,MAAMpC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIqC,SAA6B;IACjC,QAAQpD,aAAa;MACnB,KAAK,MAAM;QACToD,SAAS,GAAGC,WAAW,CAAC,CAAC;QACzB;MACF,KAAK,QAAQ;QACXD,SAAS,GAAGE,aAAa,CAAC,CAAC;QAC3B;MACF,KAAK,MAAM;QACTF,SAAS,GAAGG,WAAW,CAAC,CAAC;QACzB;MACF;QACEH,SAAS,GAAGE,aAAa,CAAC,CAAC;IAC/B;IAEA,IAAIF,SAAS,KAAKI,SAAS,IAAInE,KAAK,CAAC+D,SAAS,CAAC,KAAK,IAAI,EAAE;MACxDT,QAAQ,CAACS,SAAS,CAAC;IACrB;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAc;IAChC,MAAMI,cAAc,GAAGpE,KAAK,CACzBM,GAAG,CAAC,CAAC4C,IAAI,EAAEH,KAAK,KAAKG,IAAI,KAAK,IAAI,GAAGH,KAAK,GAAG,IAAI,CAAC,CAClDsB,MAAM,CAAEnB,IAAI,IAAqBA,IAAI,KAAK,IAAI,CAAC;IAClD,OAAOkB,cAAc,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,cAAc,CAACK,MAAM,CAAC,CAAC;EAC1E,CAAC;EAED,MAAMR,aAAa,GAAGA,CAAA,KAAc;IAElC,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAInD,KAAK,CAACmD,CAAC,CAAC,KAAK,IAAI,EAAE;QACrB,MAAMuB,SAAS,GAAG,CAAC,GAAG1E,KAAK,CAAC;QAC5B0E,SAAS,CAACvB,CAAC,CAAC,GAAG,GAAG;QAClB,IAAIO,WAAW,CAACgB,SAAS,EAAE,GAAG,CAAC,EAAE;UAC/B,OAAOvB,CAAC;QACV;MACF;IACF;IAGA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAInD,KAAK,CAACmD,CAAC,CAAC,KAAK,IAAI,EAAE;QACrB,MAAMuB,SAAS,GAAG,CAAC,GAAG1E,KAAK,CAAC;QAC5B0E,SAAS,CAACvB,CAAC,CAAC,GAAG,GAAG;QAClB,IAAIO,WAAW,CAACgB,SAAS,EAAE,GAAG,CAAC,EAAE;UAC/B,OAAOvB,CAAC;QACV;MACF;IACF;IAGA,OAAOa,WAAW,CAAC,CAAC;EACtB,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAc;IAChC,IAAIS,SAAS,GAAG,CAACC,QAAQ;IACzB,IAAIC,IAAY,GAAG,CAAC,CAAC;IACrB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAInD,KAAK,CAACmD,CAAC,CAAC,KAAK,IAAI,EAAE;QACrB,MAAMuB,SAAS,GAAG,CAAC,GAAG1E,KAAK,CAAC;QAC5B0E,SAAS,CAACvB,CAAC,CAAC,GAAG,GAAG;QAClB,IAAI2B,KAAK,GAAGC,OAAO,CAACL,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC;QACxC,IAAII,KAAK,GAAGH,SAAS,EAAE;UACrBA,SAAS,GAAGG,KAAK;UACjBD,IAAI,GAAG1B,CAAC;QACV;MACF;IACF;IACA,OAAO0B,IAAI;EACb,CAAC;EAED,MAAME,OAAO,GAAGA,CAAC/E,KAAwB,EAAEgF,KAAa,EAAEC,YAAqB,KAAa;IAC1F,MAAMC,MAAM,GAAGC,YAAY,CAACnF,KAAK,CAAC;IAClC,IAAIkF,MAAM,KAAK,IAAI,EAAE;MACnB,OAAOA,MAAM;IACf;IAEA,IAAID,YAAY,EAAE;MAChB,IAAIN,SAAS,GAAG,CAACC,QAAQ;MACzB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAInD,KAAK,CAACmD,CAAC,CAAC,KAAK,IAAI,EAAE;UACrBnD,KAAK,CAACmD,CAAC,CAAC,GAAG,GAAG;UACd,IAAI2B,KAAK,GAAGC,OAAO,CAAC/E,KAAK,EAAEgF,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC;UAC5ChF,KAAK,CAACmD,CAAC,CAAC,GAAG,IAAI;UACfwB,SAAS,GAAGL,IAAI,CAACc,GAAG,CAACN,KAAK,EAAEH,SAAS,CAAC;QACxC;MACF;MACA,OAAOA,SAAS;IAClB,CAAC,MAAM;MACL,IAAIA,SAAS,GAAGC,QAAQ;MACxB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAInD,KAAK,CAACmD,CAAC,CAAC,KAAK,IAAI,EAAE;UACrBnD,KAAK,CAACmD,CAAC,CAAC,GAAG,GAAG;UACd,IAAI2B,KAAK,GAAGC,OAAO,CAAC/E,KAAK,EAAEgF,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC;UAC3ChF,KAAK,CAACmD,CAAC,CAAC,GAAG,IAAI;UACfwB,SAAS,GAAGL,IAAI,CAACe,GAAG,CAACP,KAAK,EAAEH,SAAS,CAAC;QACxC;MACF;MACA,OAAOA,SAAS;IAClB;EACF,CAAC;EAED,MAAMQ,YAAY,GAAInF,KAAwB,IAAoB;IAChE,IAAI0D,WAAW,CAAC1D,KAAK,EAAE,GAAG,CAAC,EAAE,OAAO,EAAE;IACtC,IAAI0D,WAAW,CAAC1D,KAAK,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,EAAE;IACvC,IAAI6D,WAAW,CAAC7D,KAAK,CAAC,EAAE,OAAO,CAAC;IAChC,OAAO,IAAI;EACb,CAAC;EAED,MAAM0D,WAAW,GAAGA,CAAC1D,KAAwB,EAAEsF,MAAc,KAAc;IACzE,OAAO5F,mBAAmB,CAAC6F,IAAI,CAACC,WAAW,IACzCA,WAAW,CAACC,KAAK,CAAC1C,KAAK,IAAI/C,KAAK,CAAC+C,KAAK,CAAC,KAAKuC,MAAM,CACpD,CAAC;EACH,CAAC;EAED,MAAMzB,WAAW,GAAI7D,KAAwB,IAAc;IACzD,OAAOA,KAAK,CAACyF,KAAK,CAACvC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC;EAC3C,CAAC;EAED,MAAMwC,eAAe,GAAG,MAAOC,UAAkB,IAAK;IACpD,IAAItE,IAAI,EAAE;MACR,MAAMuE,QAAQ,GAAGxG,GAAG,CAACG,EAAE,EAAE,aAAa,EAAE8B,IAAI,CAACwE,GAAG,CAAC;MACjD,MAAMC,QAAQ,GAAG,MAAMxG,MAAM,CAACsG,QAAQ,CAAC;MAEvC,IAAIE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;QACrB,MAAMC,YAAY,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpC,MAAMC,YAAY,GAAA9D,MAAA,CAAA+D,MAAA,KACbH,YAAY;UACf,CAACL,UAAU,GAAG,CAACK,YAAY,CAACL,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;UACjDS,KAAK,EAAE,CAACJ,YAAY,CAACI,KAAK,IAAI,CAAC,IAAI;QAAC,EACrC;QAED,MAAM/G,SAAS,CAACuG,QAAQ,EAAEM,YAAY,CAAC;MACzC;IACF;EACF,CAAC;EAED,MAAMtC,OAAO,GAAG,MAAOyC,OAAe,IAAK;IACzC3F,eAAe,CAAC,KAAK,CAAC;IACtB,IAAI2F,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC3B,IAAID,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC3B3D,SAAS,CAAC,QAAQ,CAAC;MACrB,CAAC,MAAM;QACLA,SAAS,CAAC,WAAW,CAAC;QACtB,IAAI7C,IAAI,KAAK,KAAK,EAAE;UAClB,MAAM4F,eAAe,CAAC/E,aAAa,CAAC;QACtC;MACF;IACF,CAAC,MAAM;MACLgC,SAAS,CAAC,KAAK,CAAC;IAClB;IACA7D,KAAK,CAACyE,KAAK,CAAC,WAAW,EAAE8C,OAAO,EAAE,CAChC;MAAEE,IAAI,EAAE,YAAY;MAAEC,OAAO,EAAElF;IAAe,CAAC,EAC/C;MAAEiF,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEA,CAAA,KAAM3G,UAAU,CAAC4G,QAAQ,CAAC,MAAM;IAAE,CAAC,CAC7D,CAAC;EACJ,CAAC;EAED,MAAMC,UAAU,GAAI3D,KAAa,IAAK;IACpC,OACEtD,OAAA,CAACZ,gBAAgB;MACf8H,KAAK,EAAEC,MAAM,CAAC1D,IAAK;MACnBsD,OAAO,EAAEA,CAAA,KAAM1D,eAAe,CAACC,KAAK,CAAE;MACtC8D,QAAQ,EAAE,CAACpG,YAAY,IAAIT,KAAK,CAAC+C,KAAK,CAAC,KAAK,IAAK;MAAA+D,QAAA,EAEjDrH,OAAA,CAACd,IAAI;QAACgI,KAAK,EAAE,CAACC,MAAM,CAACG,QAAQ,EAAE/G,KAAK,CAAC+C,KAAK,CAAC,KAAK,GAAG,IAAI6D,MAAM,CAACI,OAAO,CAAE;QAAAF,QAAA,EACpE9G,KAAK,CAAC+C,KAAK,CAAC,IAAK3C,SAAS,CAAC2C,KAAK,CAAC,IAAI3C,SAAS,CAAC2C,KAAK,CAAC,CAACkE;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAEvB,CAAC;EAED,OACE5H,OAAA,CAACf,IAAI;IAACiI,KAAK,EAAEC,MAAM,CAACU,SAAU;IAAAR,QAAA,GAC5BrH,OAAA,CAACd,IAAI;MAACgI,KAAK,EAAEC,MAAM,CAACW,KAAM;MAAAT,QAAA,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC5C5H,OAAA,CAACd,IAAI;MAACgI,KAAK,EAAEC,MAAM,CAACY,UAAW;MAAAV,QAAA,EAC5BhH,IAAI,KAAK,KAAK,IAAIS,aAAa,KAAK,GAAG,GAAG,YAAY,GAAG,UAAUA,aAAa;IAAS;MAAA2G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,EACP5H,OAAA,CAACf,IAAI;MAACiI,KAAK,EAAEC,MAAM,CAAC5G,KAAM;MAAA8G,QAAA,EACvB9G,KAAK,CAACM,GAAG,CAAC,CAACmH,CAAC,EAAE1E,KAAK,KAAK2D,UAAU,CAAC3D,KAAK,CAAC;IAAC;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,EACP5H,OAAA,CAACZ,gBAAgB;MAAC8H,KAAK,EAAEC,MAAM,CAACc,WAAY;MAAClB,OAAO,EAAElF,cAAe;MAAAwF,QAAA,EACnErH,OAAA,CAACd,IAAI;QAACgI,KAAK,EAAEC,MAAM,CAACe,eAAgB;QAAAb,QAAA,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,EAClBvH,IAAI,KAAK,KAAK,IACbL,OAAA,CAACf,IAAI;MAACiI,KAAK,EAAEC,MAAM,CAACgB,mBAAoB;MAAAd,QAAA,GACtCrH,OAAA,CAACd,IAAI;QAACgI,KAAK,EAAEC,MAAM,CAACiB,cAAe;QAAAf,QAAA,EAAC;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAC1D5H,OAAA,CAACZ,gBAAgB;QACf8H,KAAK,EAAE,CAACC,MAAM,CAACkB,gBAAgB,EAAEnH,aAAa,KAAK,MAAM,IAAIiG,MAAM,CAACmB,gBAAgB,CAAE;QACtFvB,OAAO,EAAEA,CAAA,KAAM5F,gBAAgB,CAAC,MAAM,CAAE;QAAAkG,QAAA,EAExCrH,OAAA,CAACd,IAAI;UAACgI,KAAK,EAAEC,MAAM,CAACoB,oBAAqB;UAAAlB,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,EACnB5H,OAAA,CAACZ,gBAAgB;QACf8H,KAAK,EAAE,CAACC,MAAM,CAACkB,gBAAgB,EAAEnH,aAAa,KAAK,QAAQ,IAAIiG,MAAM,CAACmB,gBAAgB,CAAE;QACxFvB,OAAO,EAAEA,CAAA,KAAM5F,gBAAgB,CAAC,QAAQ,CAAE;QAAAkG,QAAA,EAE1CrH,OAAA,CAACd,IAAI;UAACgI,KAAK,EAAEC,MAAM,CAACoB,oBAAqB;UAAAlB,QAAA,EAAC;QAAM;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,EACnB5H,OAAA,CAACZ,gBAAgB;QACf8H,KAAK,EAAE,CAACC,MAAM,CAACkB,gBAAgB,EAAEnH,aAAa,KAAK,MAAM,IAAIiG,MAAM,CAACmB,gBAAgB,CAAE;QACtFvB,OAAO,EAAEA,CAAA,KAAM5F,gBAAgB,CAAC,MAAM,CAAE;QAAAkG,QAAA,EAExCrH,OAAA,CAACd,IAAI;UAACgI,KAAK,EAAEC,MAAM,CAACoB,oBAAqB;UAAAlB,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CACP,EACD5H,OAAA,CAACV,KAAK;MACJkJ,aAAa,EAAC,OAAO;MACrBC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAEtH,YAAa;MACtBuH,cAAc,EAAEA,CAAA,KAAMtH,eAAe,CAAC,KAAK,CAAE;MAAAgG,QAAA,EAE7CrH,OAAA,CAACf,IAAI;QAACiI,KAAK,EAAEC,MAAM,CAACyB,SAAU;QAAAvB,QAAA,GAC5BrH,OAAA,CAACd,IAAI;UAACgI,KAAK,EAAEC,MAAM,CAAC0B,SAAU;UAAAxB,QAAA,EAAE/F,eAAe,EAAEkG;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EACjE5H,OAAA,CAACT,SAAS;UACR2H,KAAK,EAAEC,MAAM,CAAC2B,KAAM;UACpBC,YAAY,EAAEtH,aAAc;UAC5BiB,KAAK,EAAElB,UAAW;UAClBwH,WAAW,EAAC,mBAAmB;UAC/BC,YAAY,EAAC;QAAS;UAAAxB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,EACF5H,OAAA,CAACZ,gBAAgB;UAAC8H,KAAK,EAAEC,MAAM,CAAC+B,YAAa;UAACnC,OAAO,EAAExD,YAAa;UAAA8D,QAAA,EAClErH,OAAA,CAACd,IAAI;YAACgI,KAAK,EAAEC,MAAM,CAACgC,gBAAiB;YAAA9B,QAAA,EAAC;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX;AAEA,MAAMT,MAAM,GAAGhI,UAAU,CAACiK,MAAM,CAAC;EAC/BvB,SAAS,EAAE;IACTwB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACD1B,KAAK,EAAE;IACL2B,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE,OAAO;IACdC,YAAY,EAAE,EAAE;IAChBC,UAAU,EAAE;EACd,CAAC;EACD9B,UAAU,EAAE;IACV0B,QAAQ,EAAE,EAAE;IACZE,KAAK,EAAE,OAAO;IACdC,YAAY,EAAE,EAAE;IAChBC,UAAU,EAAE;EACd,CAAC;EACDtJ,KAAK,EAAE;IACLuJ,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACDxG,IAAI,EAAE;IACJqG,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXG,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,OAAO;IACpBZ,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDlC,QAAQ,EAAE;IACRqC,KAAK,EAAE,SAAS;IAChBF,QAAQ,EAAE,EAAE;IACZW,SAAS,EAAE,QAAQ;IACnBP,UAAU,EAAE;EACd,CAAC;EACDtC,OAAO,EAAE;IACPoC,KAAK,EAAE,SAAS;IAChBE,UAAU,EAAE;EACd,CAAC;EACD5B,WAAW,EAAE;IACXoC,SAAS,EAAE,EAAE;IACbf,eAAe,EAAE,SAAS;IAC1BgB,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE;EAChB,CAAC;EACDrC,eAAe,EAAE;IACfyB,KAAK,EAAE,OAAO;IACdF,QAAQ,EAAE,EAAE;IACZI,UAAU,EAAE;EACd,CAAC;EACD1B,mBAAmB,EAAE;IACnB6B,aAAa,EAAE,KAAK;IACpBT,UAAU,EAAE,QAAQ;IACpBc,SAAS,EAAE;EACb,CAAC;EACDjC,cAAc,EAAE;IACduB,KAAK,EAAE,OAAO;IACda,WAAW,EAAE,EAAE;IACfX,UAAU,EAAE;EACd,CAAC;EACDxB,gBAAgB,EAAE;IAChBiB,eAAe,EAAE,MAAM;IACvBgB,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,CAAC;IACfE,gBAAgB,EAAE;EACpB,CAAC;EACDnC,gBAAgB,EAAE;IAChBgB,eAAe,EAAE;EACnB,CAAC;EACDf,oBAAoB,EAAE;IACpBoB,KAAK,EAAE,OAAO;IACdE,UAAU,EAAE;EACd,CAAC;EACDjB,SAAS,EAAE;IACT8B,MAAM,EAAE,EAAE;IACVpB,eAAe,EAAE,OAAO;IACxBiB,YAAY,EAAE,EAAE;IAChBD,OAAO,EAAE,EAAE;IACXf,UAAU,EAAE,QAAQ;IACpBoB,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZd,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC;IACDc,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE;EACb,CAAC;EACDlC,SAAS,EAAE;IACTe,YAAY,EAAE,EAAE;IAChBQ,SAAS,EAAE,QAAQ;IACnBP,UAAU,EAAE;EACd,CAAC;EACDf,KAAK,EAAE;IACLiB,MAAM,EAAE,EAAE;IACVW,MAAM,EAAE,EAAE;IACVR,WAAW,EAAE,CAAC;IACdI,OAAO,EAAE,EAAE;IACXR,KAAK,EAAE,GAAG;IACVD,UAAU,EAAE;EACd,CAAC;EACDX,YAAY,EAAE;IACZI,eAAe,EAAE,SAAS;IAC1BiB,YAAY,EAAE,EAAE;IAChBD,OAAO,EAAE,EAAE;IACXS,SAAS,EAAE;EACb,CAAC;EACD5B,gBAAgB,EAAE;IAChBQ,KAAK,EAAE,OAAO;IACdD,UAAU,EAAE,MAAM;IAClBU,SAAS,EAAE,QAAQ;IACnBP,UAAU,EAAE;EACd;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}